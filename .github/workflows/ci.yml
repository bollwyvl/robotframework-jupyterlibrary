name: tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
  CI: 1

defaults:
  run:
    shell: bash -l {0}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-lint-${{
            hashFiles('.github/locks/lint/linux-64/conda.lock') }}
          restore-keys: |
            ${{ runner.os }}-conda-lint-
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: lint
          auto-update-conda: true
          environment-file: .github/locks/lint/linux-64/conda.lock
          use-only-tar-bz2: true
      - run: python dodo.py lint build || python dodo.py lint build
      - uses: actions/upload-artifact@v2
        with:
          name: dist ${{ github.run_number }}
          path: ./dist

  docs:
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-docs-${{
            hashFiles('.github/locks/docs/linux-64/conda.lock') }}
          restore-keys: |
            ${{ runner.os }}-conda-docs-
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: docs
          auto-update-conda: true
          environment-file: .github/locks/docs/linux-64/conda.lock
          use-only-tar-bz2: true
      - run: python dodo.py docs || python dodo.py docs
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ job.status }} docs ${{ github.run_number }}
          path: ./build/docs/html
        if: always()

  test:
    name: |-
      ${{ matrix.conda-subdir }}_${{ matrix.python-version }}_${{ matrix.lab-version }}
    runs-on: ${{ matrix.vm }}
    needs: [build]
    env:
      INSTALL_ARTIFACT: 1
    strategy:
      max-parallel: 8
      # this is probably the single-source of truth of what we support
      # - the matrix is parsed in project.py
      # - the excursions are in env_specs, e.g. lab1.yml
      # - to regenerate the specs, requires `conda-lock`, `mamba` suggested:
      #
      #   rm -rf .github/locks
      #   doit -n4 lock
      #
      matrix:
        lab-version: ['lab2', 'lab1']
        python-version: ['py3.9', 'py3.6', 'py3.8']
        conda-subdir: [linux-64, osx-64, win-64]
        include:
          - conda-subdir: linux-64
            os: ubuntu
            vm: ubuntu-20.04
          - conda-subdir: osx-64
            os: macos
            vm: macos-latest
          - conda-subdir: win-64
            os: windows
            vm: windows-latest
    steps:
      - name: configure git
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - name: get conda lockfile
        id: lock
        run: |
          echo "::set-output name=file::${{
            format(
              '.github/locks/test/{0}/{1}/{2}/conda.lock',
              matrix.conda-subdir,
              matrix.python-version,
              matrix.lab-version
            ) }}"
      - uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ matrix.python-version }}-${{
            hashFiles(steps.lock.outputs.file) }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ matrix.python-version }}-
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: test
          auto-update-conda: true
          environment-file: ${{ steps.lock.outputs.file }}
          use-only-tar-bz2: true
      - if: always()
        uses: actions/download-artifact@v2
        with:
          name: dist ${{ github.run_number }}
          path: ./dist
      - name: doit (unix)
        if: ${{ matrix.os != 'windows' }}
        run: python dodo.py test || python dodo.py test
      - name: doit (windows)
        if: ${{ matrix.os == 'windows' }}
        env:
          CONDA_EXE: C:\Miniconda\envs\Script\conda.exe
        run:
          call conda activate test && python dodo.py test || python dodo.py test
        shell: cmd /C CALL {0}
      - name: upload test output
        uses: actions/upload-artifact@v2
        with:
          name:
            ${{ job.status }} atest ${{ matrix.os }} ${{ matrix.python-version
            }} ${{ matrix.lab-version }} ${{ github.run_number }}
          path: |
            ./build/test/output
        if: always()
